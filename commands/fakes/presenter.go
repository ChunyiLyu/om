// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/models"
)

type Presenter struct {
	PresentInstallationsStub        func([]models.Installation)
	presentInstallationsMutex       sync.RWMutex
	presentInstallationsArgsForCall []struct {
		arg1 []models.Installation
	}
	PresentAvailableProductsStub        func([]models.Product)
	presentAvailableProductsMutex       sync.RWMutex
	presentAvailableProductsArgsForCall []struct {
		arg1 []models.Product
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Presenter) PresentInstallations(arg1 []models.Installation) {
	var arg1Copy []models.Installation
	if arg1 != nil {
		arg1Copy = make([]models.Installation, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentInstallationsMutex.Lock()
	fake.presentInstallationsArgsForCall = append(fake.presentInstallationsArgsForCall, struct {
		arg1 []models.Installation
	}{arg1Copy})
	fake.recordInvocation("PresentInstallations", []interface{}{arg1Copy})
	fake.presentInstallationsMutex.Unlock()
	if fake.PresentInstallationsStub != nil {
		fake.PresentInstallationsStub(arg1)
	}
}

func (fake *Presenter) PresentInstallationsCallCount() int {
	fake.presentInstallationsMutex.RLock()
	defer fake.presentInstallationsMutex.RUnlock()
	return len(fake.presentInstallationsArgsForCall)
}

func (fake *Presenter) PresentInstallationsArgsForCall(i int) []models.Installation {
	fake.presentInstallationsMutex.RLock()
	defer fake.presentInstallationsMutex.RUnlock()
	return fake.presentInstallationsArgsForCall[i].arg1
}

func (fake *Presenter) PresentAvailableProducts(arg1 []models.Product) {
	var arg1Copy []models.Product
	if arg1 != nil {
		arg1Copy = make([]models.Product, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.presentAvailableProductsMutex.Lock()
	fake.presentAvailableProductsArgsForCall = append(fake.presentAvailableProductsArgsForCall, struct {
		arg1 []models.Product
	}{arg1Copy})
	fake.recordInvocation("PresentAvailableProducts", []interface{}{arg1Copy})
	fake.presentAvailableProductsMutex.Unlock()
	if fake.PresentAvailableProductsStub != nil {
		fake.PresentAvailableProductsStub(arg1)
	}
}

func (fake *Presenter) PresentAvailableProductsCallCount() int {
	fake.presentAvailableProductsMutex.RLock()
	defer fake.presentAvailableProductsMutex.RUnlock()
	return len(fake.presentAvailableProductsArgsForCall)
}

func (fake *Presenter) PresentAvailableProductsArgsForCall(i int) []models.Product {
	fake.presentAvailableProductsMutex.RLock()
	defer fake.presentAvailableProductsMutex.RUnlock()
	return fake.presentAvailableProductsArgsForCall[i].arg1
}

func (fake *Presenter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.presentInstallationsMutex.RLock()
	defer fake.presentInstallationsMutex.RUnlock()
	fake.presentAvailableProductsMutex.RLock()
	defer fake.presentAvailableProductsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Presenter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
