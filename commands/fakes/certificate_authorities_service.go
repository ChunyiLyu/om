// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/commands"
)

type CertificateAuthoritiesService struct {
	CertificateAuthoritiesStub        func() ([]commands.CA, error)
	certificateAuthoritiesMutex       sync.RWMutex
	certificateAuthoritiesArgsForCall []struct{}
	certificateAuthoritiesReturns     struct {
		result1 []commands.CA
		result2 error
	}
	certificateAuthoritiesReturnsOnCall map[int]struct {
		result1 []commands.CA
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CertificateAuthoritiesService) CertificateAuthorities() ([]commands.CA, error) {
	fake.certificateAuthoritiesMutex.Lock()
	ret, specificReturn := fake.certificateAuthoritiesReturnsOnCall[len(fake.certificateAuthoritiesArgsForCall)]
	fake.certificateAuthoritiesArgsForCall = append(fake.certificateAuthoritiesArgsForCall, struct{}{})
	fake.recordInvocation("CertificateAuthorities", []interface{}{})
	fake.certificateAuthoritiesMutex.Unlock()
	if fake.CertificateAuthoritiesStub != nil {
		return fake.CertificateAuthoritiesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.certificateAuthoritiesReturns.result1, fake.certificateAuthoritiesReturns.result2
}

func (fake *CertificateAuthoritiesService) CertificateAuthoritiesCallCount() int {
	fake.certificateAuthoritiesMutex.RLock()
	defer fake.certificateAuthoritiesMutex.RUnlock()
	return len(fake.certificateAuthoritiesArgsForCall)
}

func (fake *CertificateAuthoritiesService) CertificateAuthoritiesReturns(result1 []commands.CA, result2 error) {
	fake.CertificateAuthoritiesStub = nil
	fake.certificateAuthoritiesReturns = struct {
		result1 []commands.CA
		result2 error
	}{result1, result2}
}

func (fake *CertificateAuthoritiesService) CertificateAuthoritiesReturnsOnCall(i int, result1 []commands.CA, result2 error) {
	fake.CertificateAuthoritiesStub = nil
	if fake.certificateAuthoritiesReturnsOnCall == nil {
		fake.certificateAuthoritiesReturnsOnCall = make(map[int]struct {
			result1 []commands.CA
			result2 error
		})
	}
	fake.certificateAuthoritiesReturnsOnCall[i] = struct {
		result1 []commands.CA
		result2 error
	}{result1, result2}
}

func (fake *CertificateAuthoritiesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.certificateAuthoritiesMutex.RLock()
	defer fake.certificateAuthoritiesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CertificateAuthoritiesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
